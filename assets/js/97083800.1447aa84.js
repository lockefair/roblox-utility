"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[330],{43800:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkRequest` object","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"},{"name":"callback","desc":"","lua_type":"(...any) -> (...any)?"}],"returns":[{"desc":"","lua_type":"NetworkEvent"}],"function_type":"static","source":{"line":50,"path":"src/NetworkRequest/init.lua"}},{"name":"Destroy","desc":"Deconstructs the `NetworkRequest` object","params":[],"returns":[],"function_type":"method","source":{"line":75,"path":"src/NetworkRequest/init.lua"}},{"name":"Connect","desc":"Connects a callback to the `NetworkRequest` which is invoked when\\nthe request is invoked.\\n\\n```lua\\nlocal serverRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nserverRequest:Connect(function(player, value)\\n\\tprint(\\"The client passed the value:\\", value)\\n\\treturn \\"Thank you, Client!\\"\\nend\\n```","params":[{"name":"callback","desc":"","lua_type":"(...any) -> (...any)"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":122,"path":"src/NetworkRequest/init.lua"}},{"name":"Invoke","desc":"Invokes the `NetworkRequest` on the server and returns the response.\\n\\n```lua\\nlocal clientRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nlocal value = clientRequest:Invoke()\\nprint(\\"The server responded with:\\", value)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\r\\n"}],"function_type":"method","realm":["Client"],"source":{"line":143,"path":"src/NetworkRequest/init.lua"}}],"properties":[{"name":"className","desc":"","lua_type":"string","source":{"line":7,"path":"src/NetworkRequest/init.lua"}}],"types":[],"name":"NetworkRequest","desc":"An object that wraps Roblox\'s `RemoteFunction`. It can be used on the client to request data from the server\\nwithout having to manage `RemoteFunction` lifecycles manually \u2013 initialization and deinitialization are handled for you.\\n\\n:::note\\nNetwork requests are intended to be paired. A `NetworkRequest` object should be initialized on the server first, then on the client,\\notherwise an error will occur.\\n\\nAny type of Roblox object such as an Enum, Instance, or others can be passed as a parameter when a RemoteFunction is invoked,\\nas well as Luau types such as numbers, strings, and booleans. `NetworkRequest` shares its limitations with Roblox\'s `RemoteFunction` class.\\n:::\\n\\n```lua\\n-- Server\\nlocal serverRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nserverRequest:Connect(function(player, _)\\n\\tprint(\\"The client is requesting a response\\")\\n\\treturn \\"Hello, Client!\\"\\nend\\n\\n-- Client\\nlocal clientRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nlocal value = clientRequest:Invoke()\\nprint(\\"The server responded with:\\", value) -- Hello, Client!\\n```","source":{"line":42,"path":"src/NetworkRequest/init.lua"}}')}}]);