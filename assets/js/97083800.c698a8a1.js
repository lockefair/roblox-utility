"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[330],{43800:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkRequest` object.","params":[{"name":"name","desc":"The name of the `NetworkRequest` instance which must match on the client and server","lua_type":"string"},{"name":"parent","desc":"The parent of the `NetworkRequest` instance which must match on the client and server","lua_type":"Instance"},{"name":"callback","desc":"The callback to be called when the request is invoked","lua_type":"(player: Player, ...any) -> (...any)?"}],"returns":[{"desc":"","lua_type":"NetworkRequest\\r\\n"}],"function_type":"static","tags":["Static"],"source":{"line":73,"path":"src/Connection/NetworkRequest.lua"}},{"name":"destroy","desc":"Deconstructs the `NetworkRequest` object.","params":[],"returns":[],"function_type":"method","source":{"line":98,"path":"src/Connection/NetworkRequest.lua"}},{"name":"setCallback","desc":"Sets the callback for the `NetworkRequest` which is called when the request is invoked. The callback can\\nbe set to nil.\\n\\n\\n```lua\\nlocal serverRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nserverRequest:setCallback(function(player, value)\\n\\tprint(\\"The client passed the value:\\", value)\\n\\treturn \\"Thank you, Client!\\"\\nend\\n```","params":[{"name":"callback","desc":"The callback to be called when the request is invoked","lua_type":"(player: Player, ...any) -> (...any)?"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":148,"path":"src/Connection/NetworkRequest.lua"}},{"name":"invoke","desc":"Invokes the `NetworkRequest` on the server and returns the response.\\n\\n\\n```lua\\nlocal clientRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nlocal value = clientRequest:invoke()\\nprint(\\"The server responded with:\\", value)\\n```","params":[{"name":"...","desc":"The arguments to pass to the server","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\r\\n"}],"function_type":"method","realm":["Client"],"source":{"line":172,"path":"src/Connection/NetworkRequest.lua"}}],"properties":[{"name":"className","desc":"Static property that defines the class name `NetworkRequest`.","lua_type":"string","tags":["Static"],"source":{"line":31,"path":"src/Connection/NetworkRequest.lua"}}],"types":[{"name":"Self","desc":"","lua_type":"NetworkRequest","source":{"line":22,"path":"src/Connection/NetworkRequest.lua"}}],"name":"NetworkRequest","desc":"An object that wraps Roblox\'s `RemoteFunction`. It can be used on the client to request data from the server\\nwithout having to manage `RemoteFunction` lifecycles manually \u2013 initialization and deinitialization are handled for you.\\n\\n:::note\\nNetwork requests are intended to be paired. A `NetworkRequest` instance should be initialized on the server first, then on the client,\\notherwise an error will occur.\\n\\nAny type of Roblox object such as an Enum, Instance, or others can be passed as a parameter when a `NetworkRequest` is invoked,\\nas well as Luau types such as numbers, strings, and booleans. `NetworkRequest` shares its limitations with Roblox\'s `RemoteFunction` class.\\n:::\\n\\n```lua\\n-- Server\\nlocal serverRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nserverRequest:connect(function(player, _)\\n\\tprint(\\"The client is requesting a response\\")\\n\\treturn \\"Hello, Client!\\"\\nend\\n\\n-- Client\\nlocal clientRequest = NetworkRequest.new(\\"MyNetworkRequest\\", workspace)\\nlocal value = clientRequest:invoke()\\nprint(\\"The server responded with:\\", value) -- Hello, Client!\\n```","source":{"line":60,"path":"src/Connection/NetworkRequest.lua"}}')}}]);