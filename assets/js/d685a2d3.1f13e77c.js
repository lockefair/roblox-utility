"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[311],{82837:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkEvent` object","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"NetworkEvent\\r\\n"}],"function_type":"static","tags":["Static"],"source":{"line":68,"path":"src/Connection/NetworkEvent.lua"}},{"name":"destroy","desc":"Deconstructs the `NetworkEvent` object","params":[],"returns":[],"function_type":"method","source":{"line":88,"path":"src/Connection/NetworkEvent.lua"}},{"name":"connect","desc":"Connects a callback to the `NetworkEvent` which is invoked when\\nthe event is fired.\\n\\n:::note\\nWhen connecting on the Server, the first argument passed to the callback is always the player that fired the event.\\n:::\\n\\n```lua\\n-- Client\\nclientEvent:connect(function(...)\\n\\tprint(\\"The event fired and passed the values:\\", ...)\\nend)\\n\\n-- Server\\nserverEvent:connect(function(player, ...)\\n\\tprint(\\"The event was fired by \\" .. player .. \\" and passed the values:\\", ...)\\nend)\\n```","params":[{"name":"callback","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"Event.EventConnection\\r\\n"}],"function_type":"method","source":{"line":153,"path":"src/Connection/NetworkEvent.lua"}},{"name":"fireServer","desc":"Fires the `NetworkEvent` on the client, passing the given arguments to the server\\n\\n```lua\\nevent:fireServer(\\"Hello, server!\\")\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","realm":["Client"],"source":{"line":168,"path":"src/Connection/NetworkEvent.lua"}},{"name":"fireClient","desc":"Fires the `NetworkEvent` on the server, passing the given arguments to the players client\\n\\n```lua\\nevent:fireClient(player, \\"Hello, client!\\")\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":185,"path":"src/Connection/NetworkEvent.lua"}},{"name":"fireFilteredClients","desc":"Fires the `NetworkEvent` on the server, passing the given arguments to player clients that pass the given predicate check\\n\\n```lua\\nevent:fireFilteredClients(function(player)\\n\\treturn player.Team == game.Teams.Heroes\\nend, \\"You win!\\")\\n```","params":[{"name":"predicate","desc":"","lua_type":"(player: Player) -> boolean"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":206,"path":"src/Connection/NetworkEvent.lua"}},{"name":"fireAllClients","desc":"Fires the `NetworkEvent` on the server, passing the given arguments to all clients\\n\\n```lua\\nevent:fireAllClients(1, 2, 3)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":229,"path":"src/Connection/NetworkEvent.lua"}}],"properties":[{"name":"className","desc":"Static property that defines the class name of the `NetworkEvent` object","lua_type":"string","tags":["Static"],"source":{"line":30,"path":"src/Connection/NetworkEvent.lua"}}],"types":[{"name":"Self","desc":"","lua_type":"NetworkEvent","source":{"line":21,"path":"src/Connection/NetworkEvent.lua"}}],"name":"NetworkEvent","desc":"An object that wraps Roblox\'s `RemoteEvent`. It can be used to fire events between the server and client\\nwithout having to manage `RemoteEvent` lifecycles manually \u2013 initialization and deinitialization are handled for you.\\n\\n:::note\\nNetwork events are intended to be paired. A `NetworkEvent` object should be initialized on the server first, then on the client,\\notherwise an error will occur.\\n\\nAny type of Roblox object such as an Enum, Instance, or others can be passed as a parameter when a `NetworkEvent` is fired,\\nas well as Luau types such as numbers, strings, and booleans. `NetworkEvent` shares its limitations with Roblox\'s `RemoteEvent` class.\\n:::\\n\\n```lua\\n-- Server\\nlocal serverEvent = NetworkEvent.new(\\"MyNetworkEvent\\", workspace)\\n\\n-- Client\\nlocal clientEvent = NetworkEvent.new(\\"MyNetworkEvent\\", workspace)\\nclientEvent:connect(function(...)\\n\\tprint(\\"The event fired and passed the values:\\", ...) -- 1, 2, 3\\nend)\\n\\n-- Server\\nserverEvent:fireClient(player, 1, 2, 3)\\n```","source":{"line":59,"path":"src/Connection/NetworkEvent.lua"}}')}}]);