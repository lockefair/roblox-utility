"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[171],{79144:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkValue` object","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"},{"name":"value","desc":"","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"NetworkValue"}],"function_type":"static","source":{"line":50,"path":"src/NetworkValue/init.lua"}},{"name":"Destroy","desc":"Deconstructs the `NetworkValue` object","params":[],"returns":[],"function_type":"method","source":{"line":73,"path":"src/NetworkValue/init.lua"}},{"name":"GetValue","desc":"Returns the value of the `NetworkValue` object. If called on the server and a player is specified, the value for that specific player is returned. The player\\nparameter is ignored on the client.\\n\\n```lua\\n-- Server\\nlocal serverHealthValue = NetworkValue.new(\\"PlayerHealth\\", workspace, 100)\\n\\nserverHealthValue:SetValue(80)\\nserverHealthValue:SetValue(50, player1)\\n\\nserverHealthValue:GetValue() -- 80\\nserverHealthValue:GetValue(player1) -- 50\\n\\n-- Player1 Client\\nlocal clientHealthValue = NetworkValue.new(\\"PlayerHealth\\", workspace)\\nclientHealthVlaue:GetValue() -- 50\\n\\n-- Other Client(s)\\nlocal clientHealthValue = NetworkValue.new(\\"PlayerHealth\\", workspace)\\nclientHealthVlaue:GetValue() -- 80\\n```","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"method","source":{"line":123,"path":"src/NetworkValue/init.lua"}},{"name":"SetValue","desc":"Sets the value of the `NetworkValue` object. If a player is specified, the value for that specific player is set.\\n\\n```lua\\nlocal healthValue = NetworkValue.new(\\"PlayerHealth\\", workspace, 100)\\n\\nhealthValue:SetValue(80)\\nhealthValue:SetValue(50, player1)\\n```","params":[{"name":"value","desc":"","lua_type":"any?"},{"name":"player","desc":"","lua_type":"Player?"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":155,"path":"src/NetworkValue/init.lua"}}],"properties":[{"name":"className","desc":"","lua_type":"string","source":{"line":10,"path":"src/NetworkValue/init.lua"}}],"types":[],"name":"NetworkValue","desc":"An object that wraps Roblox\'s `RemoteEvent` and synchronizes values between the server and client. Values can be set by the server and are automatically\\nupdated on the client. Values can be set for everybody or for a specific player.\\n\\n:::note\\nNetwork values are intended to be paired. A `NetworkValue` object should be initialized on the server first, then on the client,\\notherwise an error will occur.\\n:::\\n\\n```lua\\n-- Server\\nlocal serverHealthValue = NetworkValue.new(\\"PlayerHealth\\", workspace, 100)\\n\\n-- Client\\nlocal clientHealthValue = NetworkValue.new(\\"PlayerHealth\\", workspace)\\n\\nprint(\\"The players health is:\\", clientHealthValue:GetValue()) -- 100\\nclientHealthValue.ValueChanged:Connect(function(value)\\n\\tprint(\\"The players health changed to:\\", value)\\nend)\\n```","source":{"line":42,"path":"src/NetworkValue/init.lua"}}')}}]);