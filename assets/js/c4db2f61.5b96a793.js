"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[120],{32100:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `Event` object","params":[],"returns":[{"desc":"","lua_type":"Event"}],"function_type":"static","source":{"line":48,"path":"src/Event/init.lua"}},{"name":"Destroy","desc":"Deconstructs the `Event` object","params":[],"returns":[],"function_type":"method","source":{"line":65,"path":"src/Event/init.lua"}},{"name":"Connect","desc":"Connects a callback to the event which is invoked when\\nthe event is fired.\\n\\n```lua\\nlocal event = Event.new()\\nevent:Connect(function(value)\\n\\tprint(\\"The event fired and passed the value:\\", value)\\nend)\\n```","params":[{"name":"callback","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"EventConnection"}],"function_type":"method","source":{"line":101,"path":"src/Event/init.lua"}},{"name":"Disconnect","desc":"Disconnects a callback from the event.\\n\\n:::caution\\nThis is called automatically when an EventConnection is disconnected.\\nIt\'s not necessary to call this manually.\\n:::","params":[{"name":"eventConnection","desc":"","lua_type":"EventConnection"}],"returns":[],"function_type":"method","source":{"line":120,"path":"src/Event/init.lua"}},{"name":"Fire","desc":"Fires the event with the given arguments.\\n\\n```lua\\nlocal event = Event.new()\\nevent:Connect(function(value)\\n\\tprint(\\"The event fired and passed the value:\\", value)\\nend)\\nevent:Fire(\\"Hello, world!\\")\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":142,"path":"src/Event/init.lua"}}],"properties":[{"name":"className","desc":"","lua_type":"string","source":{"line":24,"path":"src/Event/init.lua"}}],"types":[{"name":"EventConnection","desc":"An interface that respresents a connection to an event. An object which conforms to this interface is returned by the `Event:Connect` method.\\nThis `EventConnection` object can be used to disconnect the callback from the event. A connection doesn\'t need to be destroyed after being disconnected.\\n\\n```lua\\nprint(connection.Connected) -- true\\nconnection:Disconnect()\\nprint(connection.Connected) -- false\\n```","fields":[{"name":"Connected","lua_type":"boolean","desc":""},{"name":"Disconnect","lua_type":"() -> ()","desc":""}],"source":{"line":18,"path":"src/Event/init.lua"}}],"name":"Event","desc":"A signal implementation that wraps Roblox\'s BindableEvent\\n\\n```lua\\nlocal event = Event.new()\\nlocal connection = event:Connect(function(value)\\n\\tprint(\\"The event fired and passed the value:\\", value)\\nend)\\nevent:Fire(\\"Hello, world!\\")\\nconnection:Disconnect()\\nevent:Destroy()\\n```","source":{"line":40,"path":"src/Event/init.lua"}}')}}]);